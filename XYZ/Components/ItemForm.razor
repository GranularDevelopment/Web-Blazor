@using Need4Protocol;
@using XYZ.Data
@using System.ComponentModel.DataAnnotations
@inject Need4Service Need4Service

<h3>ItemForm</h3>

<div>
    <p>Enter a new item</p>

    <EditForm Model="@newItem" OnValidSubmit="HandleValidSubmit">
        <FluentValidationValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="name">Name:</label>
            <InputText @bind-Value="newItem.Name" class="form-control" id="name" />
        </div>
        <button type="submit">Submit</button>
    </EditForm>

    @if (list != null)
    {
        @foreach (Item i in list.Items)
        {
            <br />
            <span>Name: @i.Name </span>
        }
    }

</div>

@code {
    ExampleModel exampleModel = new ExampleModel();
    Item newItem = new Item();
    ItemList list = new ItemList();
    private ItemRepository.ItemRepositoryClient itemClient;

    //private async Task
    protected override void OnInitialized()
    {
        itemClient = Need4Service.GetItemClient();
    }

    private async Task Refresh()
    {
        newItem.Name = string.Empty;
        list = await Task.Run(() => itemClient.GetAllItems(new Google.Protobuf.WellKnownTypes.Empty()));
    }

    protected override async Task OnParametersSetAsync()
    {
        await Refresh();
    }

    private async Task HandleValidSubmit()
    {
        //await Task.Run(() => itemClient.AddNewItem(newItem));
        //newItem.Validate();
        await Refresh();
        StateHasChanged();
    }
}
