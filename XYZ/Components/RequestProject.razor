@using ServiceProtocol;
@using XYZ.Data
@inject WebService WebService

<h2>Work with US</h2>
<h1>Start a Project</h1>

<EditForm Model="@newProject" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-md-4 form-group">
            <label for="FirstName" class="control-label">First Name</label>
            <input @bind="newProject.Person.FirstName" class="form-control" />
        </div>
        <div class="col-md-4 form-group">
            <label for="LastName" class="control-label">Last Name</label>
            <input @bind="newProject.Person.LastName" class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 form-group">
            <label for="Email" class="control-label">Email</label>
            <input @bind="newProject.Person.Email" class="form-control" />
        </div>
        <div class="col-md-4 form-group">
            <label for="PhoneNumber" class="control-label">Phone number</label>
            <input @bind="newProject.Person.PhoneNumber" class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 form-group">
            <label for="CompanyName" class="control-label">Company Name</label>
            <input @bind="newProject.Person.CompanyName" class="form-control" />
        </div>
        <div class="col-md-4 form-group">
            <label for="CompanyType" class="control-label">Company Type</label>
            <input @bind="newProject.Person.CompanyType" class="form-control" />
        </div>
    </div>

    <h2>SERVICES NEEDED</h2>
    <div class="row">
        <div class="col-md-4">
            @foreach (var s in servicesSelected)
            {
                @if (servicesSelected.IndexOf(s) < servicesSelected.Count() / 2 + servicesSelected.Count() % 2)
                {
                    <div class="form-group">
                        <InputCheckbox @bind-Value="s.selected"/>
                        @s.service.Description
                    </div>
                }
            }
        </div>
        <div class="col-md-4">
            @foreach (var s in servicesSelected)
            {
                @if (servicesSelected.IndexOf(s) >= servicesSelected.Count() / 2 + servicesSelected.Count() % 2)
                {
                    <div class="form-group">
                        <InputCheckbox @bind-Value="s.selected"/>
                        @s.service.Description
                    </div>
                }
            }
        </div>
    </div>


    <div class="row">
        <div class="form-group">
            <label for="CompanyName" class="control-label">Message</label>
            <input @bind="newProject.Message" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="form-group">
            <input type="submit" value="Get Started" class="btn btn-primary" />
        </div>
    </div>
</EditForm>
@code {

    public class ServiceSelected
    {
        public Service service;
        public bool selected;
    }

    ProjectRequest newProject = new ProjectRequest { Person = new Person(), ServiceList = new ServiceList() };
    List<ServiceSelected> servicesSelected = new List<ServiceSelected>();

    //ItemList list = new ItemList();
    private ProjectServices.ProjectServicesClient projectServicesClient;

    //private async Task
    protected override void OnInitialized()
    {
        projectServicesClient = WebService.GetProjectServicesClient();

        ServiceList list = projectServicesClient.GetServicesAvailable(new Google.Protobuf.WellKnownTypes.Empty());
        foreach(var s in list.Services)
        {
            servicesSelected.Add(new ServiceSelected { service = s, selected = false });
        }

    }

    private async Task Refresh()
    {
        //newProject. = string.Empty;
        //list = await Task.Run(() => itemClient.GetAllItems(new Google.Protobuf.WellKnownTypes.Empty()));
    }

    protected override async Task OnParametersSetAsync()
    {
        await Refresh();
    }

    private async Task HandleValidSubmit()
    {
        foreach(var s in servicesSelected)
        {
            if(s.selected)
                newProject.ServiceList.Services.Add(s.service);
        }

        await Task.Run(() => projectServicesClient.CreateProjectRequest(newProject));
        //newItem.Validate();
        await Refresh();
        StateHasChanged();
    }
}
