@using ServiceProtocol;
@using XYZ.Data
@inject WebService WebService

<h2>Work with US</h2>
<h1>Start a Project</h1>

<EditForm Model="@newProject" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label for="FirstName" class="control-label">First Name</label>
                <input @bind="newProject.Person.FirstName" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="LastName" class="control-label">Last Name</label>
                <input @bind="newProject.Person.LastName" class="form-control" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label for="Email" class="control-label">Email</label>
                <input @bind="newProject.Person.Email" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="PhoneNumber" class="control-label">Phone number</label>
                <input @bind="newProject.Person.PhoneNumber" class="form-control" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <label for="CompanyName" class="control-label">Company Name</label>
                <input @bind="newProject.Person.CompanyName" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="CompanyType" class="control-label">Company Type</label>
                <input @bind="newProject.Person.CompanyType" class="form-control" />
            </div>
        </div>
    </div>

    <h2>SERVICES NEEDED</h2>
    <div class="row">
        <div class="col-md-4">
            @foreach (Service s in availableServices)
            {
                @if (availableServices.IndexOf(s) < availableServices.Count() / 2 + availableServices.Count() % 2)
                {
                    <div class="form-group">
                        @s.Description
                    </div>
                }
            }
        </div>
        <div class="col-md-4">
            @foreach (Service s in availableServices)
            {
                @if (availableServices.IndexOf(s) >= availableServices.Count() / 2 + availableServices.Count() % 2)
                {
                    <div class="form-group">
                        @s.Description
                    </div>
                }
            }
        </div>
    </div>


    <div class="row">
        <div class="form-group">
            <label for="CompanyName" class="control-label">Message</label>
            <input @bind="newProject.Message" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </div>
</EditForm>
        @code {
            ProjectRequest newProject = new ProjectRequest { Person = new Person(), ServiceList = new ServiceList() };
            List<Service> availableServices = new List<Service>
                    {
                    new Service {Description = "Consulting"},
                    new Service {Description = "UX/UI Design"},
                    new Service {Description = "Project Management" },
                    new Service {Description = "Mobile Development"},
                    new Service {Description = "Web Development"},
                    new Service {Description = "Cloud Services"},
                    new Service {Description = "Quality Assurance"},
                    new Service {Description = "Internet of Things"},
                };
            //ItemList list = new ItemList();
            private ProjectServices.ProjectServicesClient projectServicesClient;

            //private async Task
            protected override void OnInitialized()
            {
                projectServicesClient = WebService.GetProjectServicesClient();
            }

            private async Task Refresh()
            {
                //newProject. = string.Empty;
                //list = await Task.Run(() => itemClient.GetAllItems(new Google.Protobuf.WellKnownTypes.Empty()));
            }

            protected override async Task OnParametersSetAsync()
            {
                await Refresh();
            }

            private async Task HandleValidSubmit()
            {
                await Task.Run(() => projectServicesClient.CreateProjectRequest(newProject));
                //newItem.Validate();
                await Refresh();
                StateHasChanged();
            }
        }
